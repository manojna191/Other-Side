id: Process_News_Articles
namespace: newsProcessing

description: This workflow is usefull for getting the news articles using rss feed, scrpaing them and uploading to a database

tasks:
  - id: create_schema
    type: io.kestra.plugin.jdbc.postgresql.Query
    url: jdbc:postgresql://host.docker.internal:5432/
    username: postgres
    password: mysecretpassword
    sql: CREATE SCHEMA IF NOT EXISTS news;

  - id: create_table
    type: io.kestra.plugin.jdbc.postgresql.Query
    url: jdbc:postgresql://host.docker.internal:5432/
    username: postgres
    password: mysecretpassword
    sql: CREATE TABLE IF NOT EXISTS news.news_articles (guid INTEGER PRIMARY KEY,title VARCHAR(500) NOT NULL,content TEXT NOT NULL,link TEXT NOT NULL,publish_date VARCHAR(50) NOT NULL,source VARCHAR(255),created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
  
  - id: get_max_publish_date
    type: io.kestra.plugin.jdbc.postgresql.Query
    url: jdbc:postgresql://host.docker.internal:5432/
    username: postgres
    password: mysecretpassword
    sql: SELECT COALESCE(MAX(publish_date), '1970-01-01 00:00:00') AS max_publish_date FROM news.news_articles;
    fetchType: FETCH_ONE

  - id: get_max_guid
    type: io.kestra.plugin.jdbc.postgresql.Query
    url: jdbc:postgresql://host.docker.internal:5432/
    username: postgres
    password: mysecretpassword
    sql: SELECT COALESCE(MAX(guid), 0) AS max_guid FROM news.news_articles;
    fetchType: FETCH_ONE
  
  - id: log
    type: io.kestra.plugin.core.log.Log
    message: "{{outputs.get_max_publish_date.row.max_publish_date}}"

  - id: fetch_data
    type: io.kestra.plugin.scripts.python.Commands
    namespaceFiles:
      enabled: true
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
    containerImage: python:slim
    warningOnStdErr: false
    outputFiles:
      - news_articles.csv
    beforeCommands: 
      - pip install requests
      - pip install kestra
      - pip install beautifulsoup4
    commands: 
      - python rssReader.py "{{outputs.get_max_publish_date.row.max_publish_date}}" "{{outputs.get_max_guid.row.max_guid}}"

  - id: Insert_news_articles
    type: io.kestra.plugin.jdbc.postgresql.CopyIn
    url: jdbc:postgresql://host.docker.internal:5432/
    username: postgres
    password: mysecretpassword
    format: CSV
    from: "{{outputs.fetch_data.outputFiles['news_articles.csv']}}"
    table: news.news_articles
    header: true
    delimiter: ","
    columns:
      - guid
      - title
      - content
      - link
      - publish_date
      - source
  
triggers:
  - id: schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: '*/15 * * * *'